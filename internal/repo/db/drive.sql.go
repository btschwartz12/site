// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: drive.sql

package db

import (
	"context"
	"time"
)

const getAllFiles = `-- name: GetAllFiles :many
SELECT
    uuid, url, notes, extension, pit
FROM
    files
`

func (q *Queries) GetAllFiles(ctx context.Context) ([]File, error) {
	rows, err := q.db.QueryContext(ctx, getAllFiles)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []File
	for rows.Next() {
		var i File
		if err := rows.Scan(
			&i.Uuid,
			&i.Url,
			&i.Notes,
			&i.Extension,
			&i.Pit,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllPermalinks = `-- name: GetAllPermalinks :many
SELECT
    uuid, file_uuid, duration_seconds, expires, pit
FROM
    permalinks
`

func (q *Queries) GetAllPermalinks(ctx context.Context) ([]Permalink, error) {
	rows, err := q.db.QueryContext(ctx, getAllPermalinks)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Permalink
	for rows.Next() {
		var i Permalink
		if err := rows.Scan(
			&i.Uuid,
			&i.FileUuid,
			&i.DurationSeconds,
			&i.Expires,
			&i.Pit,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getFile = `-- name: GetFile :one
SELECT
    uuid, url, notes, extension, pit
FROM
    files
WHERE
    uuid = ?
`

func (q *Queries) GetFile(ctx context.Context, uuid string) (File, error) {
	row := q.db.QueryRowContext(ctx, getFile, uuid)
	var i File
	err := row.Scan(
		&i.Uuid,
		&i.Url,
		&i.Notes,
		&i.Extension,
		&i.Pit,
	)
	return i, err
}

const getPermalink = `-- name: GetPermalink :one
SELECT
    uuid, file_uuid, duration_seconds, expires, pit
FROM
    permalinks
WHERE
    uuid = ?
`

func (q *Queries) GetPermalink(ctx context.Context, uuid string) (Permalink, error) {
	row := q.db.QueryRowContext(ctx, getPermalink, uuid)
	var i Permalink
	err := row.Scan(
		&i.Uuid,
		&i.FileUuid,
		&i.DurationSeconds,
		&i.Expires,
		&i.Pit,
	)
	return i, err
}

const insertFile = `-- name: InsertFile :one
INSERT INTO
    files (uuid, url, notes, extension)
VALUES
    (?, ?, ?, ?)
RETURNING
    uuid, url, notes, extension, pit
`

type InsertFileParams struct {
	Uuid      string
	Url       string
	Notes     string
	Extension string
}

func (q *Queries) InsertFile(ctx context.Context, arg InsertFileParams) (File, error) {
	row := q.db.QueryRowContext(ctx, insertFile,
		arg.Uuid,
		arg.Url,
		arg.Notes,
		arg.Extension,
	)
	var i File
	err := row.Scan(
		&i.Uuid,
		&i.Url,
		&i.Notes,
		&i.Extension,
		&i.Pit,
	)
	return i, err
}

const insertPermalink = `-- name: InsertPermalink :one
INSERT INTO
    permalinks (uuid, file_uuid, duration_seconds, expires)
VALUES
    (?, ?, ?, ?)
RETURNING
    uuid, file_uuid, duration_seconds, expires, pit
`

type InsertPermalinkParams struct {
	Uuid            string
	FileUuid        string
	DurationSeconds int64
	Expires         time.Time
}

func (q *Queries) InsertPermalink(ctx context.Context, arg InsertPermalinkParams) (Permalink, error) {
	row := q.db.QueryRowContext(ctx, insertPermalink,
		arg.Uuid,
		arg.FileUuid,
		arg.DurationSeconds,
		arg.Expires,
	)
	var i Permalink
	err := row.Scan(
		&i.Uuid,
		&i.FileUuid,
		&i.DurationSeconds,
		&i.Expires,
		&i.Pit,
	)
	return i, err
}
