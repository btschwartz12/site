// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: pictures.sql

package db

import (
	"context"
)

const addDislikeToPicture = `-- name: AddDislikeToPicture :exec
UPDATE
    pictures
SET
    num_dislikes = num_dislikes + 1
WHERE
    id = ?
`

func (q *Queries) AddDislikeToPicture(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, addDislikeToPicture, id)
	return err
}

const addLikeToPicture = `-- name: AddLikeToPicture :exec
UPDATE
    pictures
SET
    num_likes = num_likes + 1
WHERE
    id = ?
`

func (q *Queries) AddLikeToPicture(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, addLikeToPicture, id)
	return err
}

const deletePicture = `-- name: DeletePicture :one
DELETE FROM
    pictures
WHERE
    id = ?
RETURNING
    url
`

func (q *Queries) DeletePicture(ctx context.Context, id int64) (string, error) {
	row := q.db.QueryRowContext(ctx, deletePicture, id)
	var url string
	err := row.Scan(&url)
	return url, err
}

const getAllPictures = `-- name: GetAllPictures :many
SELECT
    id, author, url, description, extension, num_likes, num_dislikes, pit
FROM
    pictures
`

func (q *Queries) GetAllPictures(ctx context.Context) ([]Picture, error) {
	rows, err := q.db.QueryContext(ctx, getAllPictures)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Picture
	for rows.Next() {
		var i Picture
		if err := rows.Scan(
			&i.ID,
			&i.Author,
			&i.Url,
			&i.Description,
			&i.Extension,
			&i.NumLikes,
			&i.NumDislikes,
			&i.Pit,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPicture = `-- name: GetPicture :one
SELECT
    id, author, url, description, extension, num_likes, num_dislikes, pit
FROM
    pictures
WHERE
    id = ?
`

func (q *Queries) GetPicture(ctx context.Context, id int64) (Picture, error) {
	row := q.db.QueryRowContext(ctx, getPicture, id)
	var i Picture
	err := row.Scan(
		&i.ID,
		&i.Author,
		&i.Url,
		&i.Description,
		&i.Extension,
		&i.NumLikes,
		&i.NumDislikes,
		&i.Pit,
	)
	return i, err
}

const insertPicture = `-- name: InsertPicture :one
INSERT INTO
    pictures (url, author, extension, description)
VALUES
    (?, ?, ?, ?)
RETURNING
    id, author, url, description, extension, num_likes, num_dislikes, pit
`

type InsertPictureParams struct {
	Url         string
	Author      string
	Extension   string
	Description string
}

func (q *Queries) InsertPicture(ctx context.Context, arg InsertPictureParams) (Picture, error) {
	row := q.db.QueryRowContext(ctx, insertPicture,
		arg.Url,
		arg.Author,
		arg.Extension,
		arg.Description,
	)
	var i Picture
	err := row.Scan(
		&i.ID,
		&i.Author,
		&i.Url,
		&i.Description,
		&i.Extension,
		&i.NumLikes,
		&i.NumDislikes,
		&i.Pit,
	)
	return i, err
}

const updateLikesDislikesOfPicture = `-- name: UpdateLikesDislikesOfPicture :one
UPDATE
    pictures
SET
    num_likes = ?,
    num_dislikes = ?
WHERE
    id = ?
RETURNING
    id, author, url, description, extension, num_likes, num_dislikes, pit
`

type UpdateLikesDislikesOfPictureParams struct {
	NumLikes    int64
	NumDislikes int64
	ID          int64
}

func (q *Queries) UpdateLikesDislikesOfPicture(ctx context.Context, arg UpdateLikesDislikesOfPictureParams) (Picture, error) {
	row := q.db.QueryRowContext(ctx, updateLikesDislikesOfPicture, arg.NumLikes, arg.NumDislikes, arg.ID)
	var i Picture
	err := row.Scan(
		&i.ID,
		&i.Author,
		&i.Url,
		&i.Description,
		&i.Extension,
		&i.NumLikes,
		&i.NumDislikes,
		&i.Pit,
	)
	return i, err
}
