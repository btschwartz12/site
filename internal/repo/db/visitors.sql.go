// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: visitors.sql

package db

import (
	"context"
	"database/sql"
)

const getAllVisitors = `-- name: GetAllVisitors :many
SELECT
    id, path, message, ip, city, region, country, pit
FROM
    visitors
`

func (q *Queries) GetAllVisitors(ctx context.Context) ([]Visitor, error) {
	rows, err := q.db.QueryContext(ctx, getAllVisitors)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Visitor
	for rows.Next() {
		var i Visitor
		if err := rows.Scan(
			&i.ID,
			&i.Path,
			&i.Message,
			&i.Ip,
			&i.City,
			&i.Region,
			&i.Country,
			&i.Pit,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertVisitor = `-- name: InsertVisitor :exec
INSERT INTO
    visitors (ip, path, message, city, region, country)
VALUES
    (?, ?, ?, ?, ?, ?)
`

type InsertVisitorParams struct {
	Ip      sql.NullString
	Path    string
	Message string
	City    sql.NullString
	Region  sql.NullString
	Country sql.NullString
}

func (q *Queries) InsertVisitor(ctx context.Context, arg InsertVisitorParams) error {
	_, err := q.db.ExecContext(ctx, insertVisitor,
		arg.Ip,
		arg.Path,
		arg.Message,
		arg.City,
		arg.Region,
		arg.Country,
	)
	return err
}
