basePath: /
definitions:
  api.updateLikesRequest:
    properties:
      num_dislikes:
        type: integer
      num_likes:
        type: integer
    type: object
  repo.File:
    properties:
      extension:
        type: string
      notes:
        type: string
      pit:
        type: string
      url:
        type: string
      uuid:
        type: string
    type: object
  repo.Permalink:
    properties:
      durationSeconds:
        type: integer
      expires:
        type: string
      file:
        $ref: '#/definitions/repo.File'
      pit:
        type: string
      uuid:
        type: string
    type: object
  repo.Picture:
    properties:
      author:
        type: string
      description:
        type: string
      extension:
        type: string
      id:
        type: integer
      numDislikes:
        type: integer
      numLikes:
        type: integer
      pit:
        type: string
      url:
        type: string
    type: object
  repo.Visitor:
    properties:
      city:
        type: string
      country:
        type: string
      id:
        type: integer
      ip:
        type: string
      message:
        type: string
      path:
        type: string
      pit:
        type: string
      region:
        type: string
    type: object
info:
  contact: {}
  description: Nothing to see here
  title: An API
  version: "1.0"
paths:
  /api/drive/files:
    get:
      description: Get all files
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/repo.File'
            type: array
      security:
      - Bearer: []
      summary: Get all files
      tags:
      - drive
  /api/drive/files/{id}:
    get:
      description: Get a file
      parameters:
      - description: File ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/repo.File'
      security:
      - Bearer: []
      summary: Get a file
      tags:
      - drive
  /api/drive/files/{id}/permalink:
    post:
      description: Generate a permalink
      parameters:
      - description: File ID
        in: formData
        name: file_id
        required: true
        type: string
      - description: Duration (300s, 2h45m, etc.)
        in: formData
        name: duration
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/repo.Permalink'
      security:
      - Bearer: []
      summary: Generate a permalink
      tags:
      - drive
  /api/drive/files/permalinks:
    get:
      description: Get all permalinks
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/repo.Permalink'
            type: array
      security:
      - Bearer: []
      summary: Get all permalinks
      tags:
      - drive
  /api/drive/files/permalinks/{id}/:
    get:
      description: Serve a permalink
      parameters:
      - description: Permalink ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
      security:
      - Bearer: []
      summary: Serve a permalink
      tags:
      - drive
  /api/drive/upload:
    post:
      consumes:
      - multipart/form-data
      description: Upload a file
      parameters:
      - description: File
        in: formData
        name: file
        required: true
        type: file
      - description: Notes
        in: formData
        name: notes
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/repo.File'
      security:
      - Bearer: []
      summary: Upload a file
      tags:
      - drive
  /api/pics:
    get:
      description: Get pictures
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/repo.Picture'
            type: array
      security:
      - Bearer: []
      summary: Get pictures
      tags:
      - pictures
  /api/pics/delete/{id}:
    delete:
      description: Delete a picture
      parameters:
      - description: Picture ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "204":
          description: No Content
      security:
      - Bearer: []
      summary: Delete a picture
      tags:
      - pictures
  /api/pics/update_likes/{id}:
    put:
      consumes:
      - application/json
      description: Update the likes and dislikes of a picture
      parameters:
      - description: Picture ID
        in: path
        name: id
        required: true
        type: string
      - description: Likes and Dislikes
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/api.updateLikesRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/repo.Picture'
      security:
      - Bearer: []
      summary: Update likes
      tags:
      - pictures
  /api/pics/upload:
    post:
      consumes:
      - multipart/form-data
      description: Upload a picture
      parameters:
      - description: Picture file
        in: formData
        name: file
        required: true
        type: file
      - description: Description of the picture
        in: formData
        name: description
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/repo.Picture'
      security:
      - Bearer: []
      summary: Upload a picture
      tags:
      - pictures
  /api/visitors:
    get:
      description: Get the visitors
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/repo.Visitor'
            type: array
      security:
      - Bearer: []
      summary: Get visitors
      tags:
      - visitors
securityDefinitions:
  Bearer:
    description: Please provide a valid api token
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
